{
    // CCL-specific snippets

    "CCL query header": {
        "scope": "ccl",
        "prefix": "query_header",
        "body": [
            "/*",
            "${TM_FILENAME:ccl file name}",
            "~~~~~~~~~~~~~~~~~~~~",
            "${2:ccl query description}",
            "*/"
        ],
        "description": "Header at the top of CCL query files to describe what it does"
    },

    "CCL query pharmacy orders":{
        "scope": "ccl",
        "prefix": "query_pharmacy_orders",
        "body": [
            "select pt = p.name_full_formatted",
            "    , mrn = pa.alias",
            "    , fin = ea.alias",
            "    , facility = uar_get_code_display(e.loc_facility_cd)",
            "from orders o",
            "    , person p",
            "    , person_alias pa",
            "    , encounter e",
            "    , encntr_alias ea",
            "plan o where o.orig_order_dt_tm > cnvtdatetime(curdate-30, 0)",
            "	and o.product_id = 0",
            "	and o.activity_type_cd = value(uar_get_code_by(\"MEANING\", 106, \"PHARMACY\"))",
            "join p where p.person_id = o.person_id",
            "	and p.active_ind = 1",
            "	and p.end_effective_dt_tm > sysdate",
            "join pa where pa.person_id = p.person_id",
            "	and pa.active_ind = 1",
            "	and pa.end_effective_dt_tm > sysdate",
            "	and pa.person_alias_type_cd = value(uar_get_code_by(\"MEANING\", 4, \"MRN\"))",
            "join e where e.encntr_id = o.encntr_id",
            "	and e.active_ind = 1",
            "	and e.end_effective_dt_tm > sysdate",
            "join ea where ea.encntr_id = e.encntr_id",
            "	and ea.active_ind = 1",
            "	and ea.end_effective_dt_tm > sysdate",
            "	and ea.encntr_alias_type_cd = value(uar_get_code_by(\"MEANING\", 319, \"FIN NBR\"))"
        ],
        "description": "Starting a query for pharmacy orders from the orders table"
    },

    "CCL query pathway orders":{
        "scope": "ccl",
        "prefix": "query_pathway_orders",
        "body": [
            "select pt = p.name_full_formatted",
            "    , mrn = pa.alias",
            "    , fin = ea.alias",
            "    , facility = uar_get_code_display(e.loc_facility_cd)",
            "from pathway pw",
            "    , act_pw_comp apc",
            "    , person p",
            "    , person_alias pa",
            "    , orders o",
            "    , encounter e",
            "    , encntr_alias ea",
            "plan pw where pw.order_dt_tm > cnvtdatetime(curdate-${1:days to go back}, 0)",
            "	and pw.type_mean = \"PATHWAY\"",
            "join apc where apc.pathway_id = pw.pathway_id",
            "	and apc.parent_entity_name = \"ORDERS\"",
            "join p where p.person_id = pw.person_id",
            "	and p.active_ind = 1",
            "	and p.end_effective_dt_tm > sysdate",
            "join pa where pa.person_id = p.person_id",
            "	and pa.active_ind = 1",
            "	and pa.end_effective_dt_tm > sysdate",
            "	and pa.person_alias_type_cd = value(uar_get_code_by(\"MEANING\", 4, \"MRN\"))",
            "join e where e.encntr_id = pw.encntr_id",
            "	and e.active_ind = 1",
            "	and e.end_effective_dt_tm > sysdate",
            "join ea where ea.encntr_id = e.encntr_id",
            "	and ea.active_ind = 1",
            "	and ea.end_effective_dt_tm > sysdate",
            "	and ea.encntr_alias_type_cd = value(uar_get_code_by(\"MEANING\", 319, \"FIN NBR\"))"
            "join o where o.order_id = apc.parent_entity_id",
        ],
        "description": "Finding powerplans that have been placed and corresponding orders"
    },

    "CCL query regimens":{
        "scope": "ccl",
        "prefix": "query_regimen",
        "body": [
            "select pt = p.name_full_formatted",
            "    , mrn = pa.alias",
            "    , fin = ea.alias",
            "    , facility = uar_get_code_display(e.loc_facility_cd)",
            "from regimen r",
            "    , person p",
            "    , person_alias pa",
            "    , encounter e",
            "    , encntr_alias ea",
            "plan r where r.order_dt_tm > cnvtdatetime(curdate-${1:days to go back}, 0)",
            "join p where p.person_id = r.person_id",
            "    and p.active_ind = 1",
            "    and p.end_effective_dt_tm > sysdate",
            "join pa where pa.person_id = p.person_id",
            "    and pa.active_ind = 1",
            "    and pa.end_effective_dt_tm > sysdate",
            "    and pa.person_alias_type_cd = value(uar_get_code_by(\"MEANING\", 4, \"MRN\"))",
            "join e where e.encntr_id = r.encntr_id",
            "    and e.active_ind = 1",
            "    and e.end_effective_dt_tm > sysdate",
            "join ea where ea.encntr_id = e.encntr_id",
            "    and ea.active_ind = 1",
            "    and ea.end_effective_dt_tm > sysdate",
            "    and ea.encntr_alias_type_cd = value(uar_get_code_by(\"MEANING\", 319, \"FIN NBR\"))",
        ],
        "description": "Finding regimens that have already been placed"
    },
    
    "CCL control log":{
        "scope": "ccl",
        "prefix": "control_log",
        "body": [
";****************************************************************************",
";    *                      GENERATED MODIFICATION CONTROL LOG              *",
";    ************************************************************************",
";    *                                                                      *",
";    *Mod Date      Engineer             Comment                            *",
";    *--- --------  -------------------- -----------------------------------*",
";    *000 ${CURRENT_MONTH}/${CURRENT_DATE}/${CURRENT_YEAR_SHORT}  ${1:User Name}             Initial Release                    *",
";****************************************************************************",
";************************  END OF ALL MODCONTROL BLOCKS  ********************"
        ],
        "description": "Generated modification control log"
    },

    "Record structure list increment":{
        "scope": "ccl",
        "prefix": "rec_struc_list_incr",
        "body": [
            "/*Header section*/",
            "${1:counter_var} = 0",
            "stat = alterlist(${2:record_struct}, 10)",
            "",
            "/*Detail section*/",
            "${1:counter_var} = ${1:counter_var} + 1",
            "if(mod(${1:counter_var}, 10)=1)",
            "    stat = alterlist(${2:record_struct}, ${1:counter_var} + 9)",
            "endif",
            "",
            "/*Footer section*/",
            "stat = alterlist(${2:record_struct}, ${1:counter_var})",
        ],
        "description": "List increment components in the report writer section"
    },

    "CCL program header":{
        "scope": "ccl",
        "prefix": "program_header",
        "body": [
            "/*****************************************************************************",
            "",
            "        Source file name:       ${1:source_file_name}",
            "        Object name:",
            "        Request #:",
            "",
            "        Product:                ${2:product}",
            "        Product Team:           ${2:product}",
            "        HNA Version:",
            "        CCL Version:",
            "",
            "        Program purpose:        ${3:purpose}",
            "",
            "        Tables read:            ${4:tables}",
            "",
            "        Tables updated:         ",
            "        Executing from:         ",
            " ",
            "        Special Notes:",
            "",
            "******************************************************************************/",
            "",
            "drop program ${1:source_file_name}:DBA go",
            "create program ${1:source_file_name}:DBA"	
        ],
        "description": "Program header"
    },

    "WITH date format and uar_code":{
        "scope": "ccl",
        "prefix": "with_date_format_uar_code",
        "body": "with format(date, \"mm/dd/yyyy hh:mm:ss\"), uar_code(d)",
        "description": "With section with date formatting (mm/dd/yyyy hh:mm:ss) and uar_code section"
    }
}
